!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Base	lib/ruby-enum/errors/base.rb	/^      class Base < StandardError$/;"	c	class:Ruby.Enum.Errors
ClassMethods	lib/ruby-enum/enum.rb	/^    module ClassMethods$/;"	m	class:Ruby.Enum
Colors	spec/ruby-enum/enum_spec.rb	/^class Colors$/;"	c
DuplicateKeyError	lib/ruby-enum/errors/duplicate_key_error.rb	/^      class DuplicateKeyError < Base$/;"	c	class:Ruby.Enum.Errors
DuplicateValueError	lib/ruby-enum/errors/duplicate_value_error.rb	/^      class DuplicateValueError < Base$/;"	c	class:Ruby.Enum.Errors
EmptyEnums	spec/ruby-enum/enum_spec.rb	/^    class EmptyEnums$/;"	c
Enum	lib/ruby-enum/enum.rb	/^  module Enum$/;"	m	class:Ruby
Enum	lib/ruby-enum/errors/base.rb	/^  module Enum$/;"	m	class:Ruby
Enum	lib/ruby-enum/errors/duplicate_key_error.rb	/^  module Enum$/;"	m	class:Ruby
Enum	lib/ruby-enum/errors/duplicate_value_error.rb	/^  module Enum$/;"	m	class:Ruby
Enum	lib/ruby-enum/errors/uninitialized_constant_error.rb	/^  module Enum$/;"	m	class:Ruby
Enum	lib/ruby-enum/version.rb	/^  module Enum$/;"	m	class:Ruby
Errors	lib/ruby-enum/errors/base.rb	/^    module Errors$/;"	m	class:Ruby.Enum
Errors	lib/ruby-enum/errors/duplicate_key_error.rb	/^    module Errors$/;"	m	class:Ruby.Enum
Errors	lib/ruby-enum/errors/duplicate_value_error.rb	/^    module Errors$/;"	m	class:Ruby.Enum
Errors	lib/ruby-enum/errors/uninitialized_constant_error.rb	/^    module Errors$/;"	m	class:Ruby.Enum
FirstSubclass	spec/ruby-enum/enum_spec.rb	/^class FirstSubclass < Colors$/;"	c
Ruby	lib/ruby-enum/enum.rb	/^module Ruby$/;"	m
Ruby	lib/ruby-enum/errors/base.rb	/^module Ruby$/;"	m
Ruby	lib/ruby-enum/errors/duplicate_key_error.rb	/^module Ruby$/;"	m
Ruby	lib/ruby-enum/errors/duplicate_value_error.rb	/^module Ruby$/;"	m
Ruby	lib/ruby-enum/errors/uninitialized_constant_error.rb	/^module Ruby$/;"	m
Ruby	lib/ruby-enum/version.rb	/^module Ruby$/;"	m
SecondSubclass	spec/ruby-enum/enum_spec.rb	/^class SecondSubclass < FirstSubclass$/;"	c
UninitializedConstantError	lib/ruby-enum/errors/uninitialized_constant_error.rb	/^      class UninitializedConstantError < Base$/;"	c	class:Ruby.Enum.Errors
compose_message	lib/ruby-enum/errors/base.rb	/^        def compose_message(key, attributes = {})$/;"	f	class:Ruby.Enum.Errors.Base
const_missing	lib/ruby-enum/enum.rb	/^      def const_missing(key)$/;"	f	class:Ruby.Enum.ClassMethods
create_problem	lib/ruby-enum/errors/base.rb	/^        def create_problem(key, attributes)$/;"	f	class:Ruby.Enum.Errors.Base
create_resolution	lib/ruby-enum/errors/base.rb	/^        def create_resolution(key, attributes)$/;"	f	class:Ruby.Enum.Errors.Base
create_summary	lib/ruby-enum/errors/base.rb	/^        def create_summary(key, attributes)$/;"	f	class:Ruby.Enum.Errors.Base
define	lib/ruby-enum/enum.rb	/^      def define(key, value)$/;"	f	class:Ruby.Enum.ClassMethods
each	lib/ruby-enum/enum.rb	/^      def each(&block)$/;"	f	class:Ruby.Enum.ClassMethods
included	lib/ruby-enum/enum.rb	/^    def self.included(base)$/;"	F	class:Ruby.Enum
initialize	lib/ruby-enum/enum.rb	/^    def initialize(key, value)$/;"	f	class:Ruby.Enum
initialize	lib/ruby-enum/errors/duplicate_key_error.rb	/^        def initialize(attrs)$/;"	f	class:Ruby.Enum.Errors.DuplicateKeyError
initialize	lib/ruby-enum/errors/duplicate_value_error.rb	/^        def initialize(attrs)$/;"	f	class:Ruby.Enum.Errors.DuplicateValueError
initialize	lib/ruby-enum/errors/uninitialized_constant_error.rb	/^        def initialize(attrs)$/;"	f	class:Ruby.Enum.Errors.UninitializedConstantError
key	lib/ruby-enum/enum.rb	/^      def key(v)$/;"	f	class:Ruby.Enum.ClassMethods
key?	lib/ruby-enum/enum.rb	/^      def key?(k)$/;"	f	class:Ruby.Enum.ClassMethods
keys	lib/ruby-enum/enum.rb	/^      def keys$/;"	f	class:Ruby.Enum.ClassMethods
parse	lib/ruby-enum/enum.rb	/^      def parse(k)$/;"	f	class:Ruby.Enum.ClassMethods
to_h	lib/ruby-enum/enum.rb	/^      def to_h$/;"	f	class:Ruby.Enum.ClassMethods
translate	lib/ruby-enum/errors/base.rb	/^        def translate(key, options)$/;"	f	class:Ruby.Enum.Errors.Base
validate_key!	lib/ruby-enum/enum.rb	/^      def validate_key!(key)$/;"	f	class:Ruby.Enum.ClassMethods
validate_value!	lib/ruby-enum/enum.rb	/^      def validate_value!(value)$/;"	f	class:Ruby.Enum.ClassMethods
value	lib/ruby-enum/enum.rb	/^      def value(k)$/;"	f	class:Ruby.Enum.ClassMethods
value?	lib/ruby-enum/enum.rb	/^      def value?(v)$/;"	f	class:Ruby.Enum.ClassMethods
values	lib/ruby-enum/enum.rb	/^      def values$/;"	f	class:Ruby.Enum.ClassMethods
